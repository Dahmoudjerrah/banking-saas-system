version: "3.9"

services:
  db_saas:
    image: postgres:16
    container_name: db_saas
    environment:
      POSTGRES_DB: saas_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    volumes:
      - db_saas_data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d saas_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  db_rasidi:
    image: postgres:16
    container_name: db_rasidi
    environment:
      POSTGRES_DB: db_rasidi
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    volumes:
      - db_rasidi_data:/var/lib/postgresql/data/
    ports:
      - "5434:5432"
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rasidi"]
      interval: 30s
      timeout: 10s
      retries: 3

  db_gaza:
    image: postgres:16
    container_name: db_gaza
    environment:
      POSTGRES_DB: db_gaza
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    volumes:
      - db_gaza_data:/var/lib/postgresql/data/
    ports:
      - "5435:5432"
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gaza"]
      interval: 30s
      timeout: 10s
      retries: 3

  db_sedad:
    image: postgres:16
    container_name: db_sedad
    environment:
      POSTGRES_DB: db_sedad
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    volumes:
      - db_sedad_data:/var/lib/postgresql/data/
    ports:
      - "5436:5432"
    networks:
      - saas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sedad"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    env_file:
      - .env.dev
    build: .
    container_name: saas-web
    command: >
      sh -c "
        echo 'Waiting for databases to be ready...' &&
        sleep 10 &&
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        python manage.py migrate --database=rasidi &&
        python manage.py migrate --database=gaza &&
        python manage.py migrate --database=sedad &&
        echo 'Starting Django development server...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    ports:
      - "8000:8000"
    depends_on:
      db_saas:
        condition: service_healthy
      db_rasidi:
        condition: service_healthy
      db_gaza:
        condition: service_healthy
      db_sedad:
        condition: service_healthy
    networks:
      - saas-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - saas-network
    depends_on:
      - db_saas
      - db_rasidi
      - db_gaza
      - db_sedad
    restart: unless-stopped

volumes:
  db_saas_data:
  db_rasidi_data:
  db_gaza_data:
  db_sedad_data:
  pgadmin_data:

networks:
  saas-network:
    driver: bridge
